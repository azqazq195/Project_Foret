package member.controller;

import java.io.File;
import java.io.FileOutputStream;

import javax.servlet.http.HttpServletRequest;

import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.util.FileCopyUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import community.bean.CommunityDTO;
import files.bean.FilesDTO;

@Controller
public class MemberController {
	@Autowired
	MemberService memberService;
	
	@RequestMapping(value = "/member/member_insert.do")
	public ModelAndView memberWrite(HttpServletRequest request) throws Exception {
		request.setCharacterEncoding("UTF-8");
		
		String name = request.getParameter("name");
	    String nickname = request.getParameter("nickname");
	    String birth = request.getParameter("birth");
	    String email = request.getParameter("email");
		
		return null;
	}
	
	// 매개변수 MultipartFile의 photo는 <input type="file" name="photo"/> 태그의 name과 일치해야함
			   @RequestMapping(value = "/community/community_insert.do")
			   public ModelAndView communityWrite(HttpServletRequest request, MultipartFile photo) throws Exception {
			      request.setCharacterEncoding("UTF-8");
			      // 데이터
			      String dir = request.getSession().getServletContext().getRealPath("/storage");
			      
			      String user_name = request.getParameter("user_name");
			      String user_pwd = request.getParameter("user_pwd");
			      String email = request.getParameter("email");
			      String subject = request.getParameter("subject");
			      String content = request.getParameter("content");
			      
			      // DB
			      CommunityDTO communityDTO = new CommunityDTO();
			      communityDTO.setUser_name(user_name);
			      communityDTO.setUser_pwd(user_pwd);
			      communityDTO.setEmail(email);
			      communityDTO.setSubject(subject);
			      communityDTO.setContent(content);
			      
			      // 글 정보 저장
			      int result1 = communityService.communityWrite(communityDTO);
			      
			      // json
			      int community_seq = 0;
			      String rt = "FAIL";   
			      if(result1 > 0) rt = "OK";
			      
			      // 글 데이터 저장이 성공한 경우, 파일 관련 데이터 저장
			      if(rt.equals("OK")) {
			         // photo는 파일이 전달되지 않으면 null
			         if(photo != null) {
			            // 전송되어온 파일 이름
			            String originname = photo.getOriginalFilename();
			            // storage 폴더에 저장된 파일 이름
			            String filename = photo.getOriginalFilename();
			            // 저장할 파일의 확장자를 원본이름에서 추출
			            int lastIndex = originname.lastIndexOf(".");
			            String filetype = originname.substring(lastIndex + 1);
			            // 파일의 크기
			            int filesize = (int)photo.getSize();
			            // 파일 복사
			            File file = new File(dir, filename);
			            FileCopyUtils.copy(photo.getInputStream(), new FileOutputStream(file));
			            
			            // dto에 저장
			            FilesDTO filesDTO = new FilesDTO();
			            filesDTO.setDir(dir);
			            filesDTO.setOriginname(originname);
			            filesDTO.setFilename(filename);
			            filesDTO.setFiletype(filetype);
			            filesDTO.setFilesize(filesize);
			            
			            // community seq 값 얻기
			            community_seq = communityService.getCommunityFirstSeq();
			            filesDTO.setCommunity_seq(community_seq);
			            
			            int result2 = communityService.filesWrite(filesDTO);
			         }      
			      }
			      // json 출력
			      JSONObject json = new JSONObject();
			      json.put("rt", rt);
			      json.put("seq", community_seq);
			      
			      // 화면 네비게이션
			      ModelAndView modelAndView = new ModelAndView();
			      modelAndView.addObject("json", json);
			      modelAndView.setViewName("community.jsp");
			       
			      return modelAndView;
			   }
}
